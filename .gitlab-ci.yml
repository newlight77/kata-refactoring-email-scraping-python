image: python:3.9

stages:
  - test
  - quality
  - build image
  - CD pipeline

ut:
  stage: test
  variables:
    PYTHONPATH: .
  before_script:
    - python --version
    - pip --version
    - pip install -U pipenv
    - pipenv lock -r > requirements.txt
    - pip install -r requirements.txt
    - pipenv lock -r --dev > requirements.dev.txt
    - pip install -r requirements.dev.txt
  script: 
    - PYTHONPATH=. pytest --cov-report xml --cov=app --cov=domain --cov=infrastructure --cov=shared ./tests/unit ./tests/component -v -s
    # need to correct paths to source files
    - coverage xml -i # https://stackoverflow.com/questions/12844451/test-test-coverage-with-python-in-sonar-not-showing-up
  cache:
    paths:
      - .pytest_cache/
      - coverage.xml
  tags:
    - node

lint:
  stage: quality
  before_script:
    - python --version
    - pip --version
    - pip install -U pipenv
    - pipenv lock -r --dev > requirements.dev.txt
    - pip install -r requirements.dev.txt
  script: 
    - ./tools/linter/lint.sh
  dependencies:
    - ut
  tags:
    - node

codecov:
  stage: quality
  script:
    - pip install codecov
    - codecov -t 446cb939-0e55-4b6b-8b97-6a7252911df8
  dependencies:
    - ut
  tags:
    - node

code-analysis:
  stage: quality
  image: ciricihq/gitlab-sonar-scanner
  variables:
    SONAR_URL: https://ci.oneprofile.io/sonar
    SONAR_ANALYSIS_MODE: publish
  only:
    - master
    - develop
    - /^[0-9].[0-9].[0-9]$/
    - /^v[0-9].[0-9].[0-9]$/
  script:
    - gitlab-sonar-scanner
  dependencies:
    - ut
  cache:
    paths:
      - .pytest_cache/
      - coverage.xml
  when: on_success
  tags:
    - node


build-image:
  image: docker:19.03.12
  stage: build image
  services:
    - name: docker:19.03.12-dind
      command: ["--insecure-registry=registry.gitlab.com"]
  variables:
    DOCKER_DRIVER: overlay2
    VERSION: latest
    SHORT_VERSION: latest  
    ENV: local
    ENABLE_BUILD: 'true'
    GROUP_REGISTRY: registry.gitlab.com/oneprofile/
    GROUP_REGISTRY_USER: oneprofile-read
    # GROUP_REGISTRY_PASSWORD: on gitlab.com project/settings/cicd/variables
  before_script:
    - apk add --no-cache make git
    - apk add --no-cache docker-compose
    - docker info
    - docker-compose --version
    - VERSION=$(git describe --always) # e.g. v1.0.4-4-g9bd8499
    - SHORT_VERSION=$(git describe --always | cut -d'-' -f1) # e.g. v1.0.4
    - echo $VERSION $ENV
  script:
    - docker login -u $GROUP_REGISTRY_USER -p $GROUP_REGISTRY_PASSWORD $GROUP_REGISTRY
    - docker-compose -f ./docker-compose.yml pull app-cv-backend
    - docker-compose -f ./docker-compose.yml build app-cv-backend
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose -f ./docker-compose.yml push app-cv-backend
    - VERSION=$(git describe --always | cut -d'-' -f1) # e.g. v1.0.4
    - docker-compose -f ./docker-compose.yml build app-cv-backend
    - docker-compose -f ./docker-compose.yml push app-cv-backend
    - VERSION=latest
    - docker-compose -f ./docker-compose.yml build app-cv-backend
    - docker-compose -f ./docker-compose.yml push app-cv-backend
  dependencies:
    - codecov
    - code-analysis
  only:
    - master
    - develop
    - /^[0-9].[0-9].[0-9]$/
    - /^v[0-9].[0-9].[0-9]$/
  tags:
    - image


after_script:
  - echo "End CI"
